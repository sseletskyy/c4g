require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe A::AdminProfilesController do

  # This should return the minimal set of attributes required to create a valid
  # AdminProfile. As you add validations to AdminProfile, be sure to
  # adjust the attributes here as well.
  login_admin

  let(:valid_attributes) { {"first_name" => "I", 'middle_name' => 'O', 'last_name' => 'F'} }
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all admin_profiles as @admin_profiles" do
      admin_profile = @current_admin.admin_profile
      get :index, {}, valid_session
      assigns(:admin_profiles).should eq([admin_profile])
    end
    it "returns all admin_profiles as json" do
      admin_profile = @current_admin.admin_profile
      get :index, {format: :json}, valid_session
      p response.body.inspect
    end
  end

  describe "GET show" do
    it "assigns the requested admin_profile as @admin_profile" do
      admin_profile = @current_admin.admin_profile
      get :show, {:id => admin_profile.to_param}, valid_session
      assigns(:admin_profile).should eq(admin_profile)
    end
  end

  describe "GET edit" do
    it "assigns the requested admin_profile as @admin_profile" do
      admin_profile = @current_admin.admin_profile
      get :edit, {:id => admin_profile.to_param}, valid_session
      assigns(:admin_profile).should eq(admin_profile)
    end
  end

  describe "PUT update" do
    let(:admin_profile) { @current_admin.admin_profile }
    describe "with valid params" do
      it "updates the requested admin_profile" do
        AdminProfile.any_instance.should_receive(:update).with({"first_name" => "Z"})
        put :update, {:id => admin_profile.to_param, :admin_profile => {"first_name" => "Z"}}, valid_session
      end

      it "assigns the requested admin_profile as @admin_profile" do
        put :update, {:id => admin_profile.to_param, :admin_profile => valid_attributes}, valid_session
        assigns(:admin_profile).should eq(admin_profile)
      end

      it "redirects to the admin_profile" do
        put :update, {:id => admin_profile.to_param, :admin_profile => valid_attributes}, valid_session
        response.should redirect_to a_home_path
      end
    end

    describe "with invalid params" do
      it "assigns the admin_profile as @admin_profile" do
        # Trigger the behavior that occurs when invalid params are submitted
        AdminProfile.any_instance.stub(:save).and_return(false)
        put :update, {:id => admin_profile.to_param, :admin_profile => {"admin_id" => "invalid value"}}, valid_session
        assigns(:admin_profile).should eq(admin_profile)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        AdminProfile.any_instance.stub(:save).and_return(false)
        put :update, {:id => admin_profile.to_param, :admin_profile => {"admin_id" => "invalid value"}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  #describe "DELETE destroy" do
  #  it "destroys the requested admin_profile" do
  #    admin_profile = AdminProfile.create! valid_attributes
  #    expect {
  #      delete :destroy, {:id => admin_profile.to_param, namespace: 'u'}, valid_session
  #    }.to change(AdminProfile, :count).by(-1)
  #  end
  #
  #  it "redirects to the admin_profiles list" do
  #    admin_profile = AdminProfile.create! valid_attributes
  #    delete :destroy, {:id => admin_profile.to_param}, valid_session
  #    response.should redirect_to(a_admin_profiles_url)
  #  end
  #end

end
